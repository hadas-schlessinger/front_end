{"ast":null,"code":"var _jsxFileName = \"/Users/hadasch/PycharmProjects/front_end/src/components/SetData/Calculating.js\";\nimport React, { useState, useEffect } from 'react';\nimport LoadingPage from './LoadingPage';\nimport { useHistory } from \"react-router-dom\";\nimport * as SetParams from '../../services/SetParams';\nexport default function Calculating(props) {\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  const [error_msg, setErrorMsg] = useState(false);\n  const history = useHistory();\n\n  const request = () => {\n    if (props.projectName == null || props.formID == null) {\n      navigateTo(\"set\");\n    }\n\n    SetParams.methodStatus(props.projectName, props.formID.id).then(response => {\n      console.log({\n        status: response.data.status\n      });\n\n      if (response.data.status == \"DATA ERROR\") {\n        setErrorMsg(response.data.message);\n        setError(true);\n      }\n\n      if (response.data.status == \"RUN TIME ERROR\") {\n        setErrorMsg(response.data.message);\n        setError(true);\n      }\n\n      if (response.data.status == \"DONE\") {\n        setSuccess(true);\n        navigateTo(\"results\");\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      request();\n    }, 1000 * 60);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  function navigateTo(serviceName) {\n    const state = {\n      'name': props.projectName,\n      'id': props.formID.id\n    };\n    history.push(`/${serviceName}`, state);\n  }\n\n  return React.createElement(\"div\", {\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, !error && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    style: {\n      color: '#194d33',\n      fontSize: 20,\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Your project ID is: \"), React.createElement(\"h2\", {\n    style: {\n      textTransform: 'lowercase',\n      color: '#194d33',\n      fontSize: 20,\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, props.formID.id, \" \"), React.createElement(\"h2\", {\n    style: {\n      color: '#194d33',\n      fontSize: 20,\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Your project name is \", props.projectName, \" \"), React.createElement(LoadingPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), success && navigateTo(\"results\"), error && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"error\",\n    style: {\n      fontSize: 20,\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Someting is wrong! \"), React.createElement(\"h3\", {\n    className: \"error\",\n    style: {\n      fontSize: 20,\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \" Error message: \", error_msg), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/hadasch/PycharmProjects/front_end/src/components/SetData/Calculating.js"],"names":["React","useState","useEffect","LoadingPage","useHistory","SetParams","Calculating","props","success","setSuccess","error","setError","error_msg","setErrorMsg","history","request","projectName","formID","navigateTo","methodStatus","id","then","response","console","log","status","data","message","catch","e","interval","setInterval","clearInterval","serviceName","state","push","height","width","color","fontSize","textAlign","textTransform"],"mappings":"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","sourcesContent":["import React,  {useState, useEffect} from 'react'\nimport LoadingPage from './LoadingPage';\nimport { useHistory } from \"react-router-dom\";\nimport * as SetParams from  '../../services/SetParams'\n\n\n\nexport default function Calculating(props) {\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState(false);\n  const [error_msg, setErrorMsg] = useState(false);\n  const history = useHistory();\n\n    const request = () => {\n      if(props.projectName==null || props.formID==null)\n      {\n        navigateTo(\"set\")\n      }\n      SetParams.methodStatus(props.projectName, props.formID.id).then((response) =>{\n        console.log({status: response.data.status});\n        if (response.data.status == \"DATA ERROR\"){\n          setErrorMsg(response.data.message)\n          setError(true)\n       }\n       if (response.data.status == \"RUN TIME ERROR\"){\n        setErrorMsg(response.data.message)\n        setError(true)\n     }\n        if (response.data.status == \"DONE\"){\n          setSuccess(true)\n          navigateTo(\"results\")\n       }\n      \n      }).catch((e)=>{\n        console.log(e)\n      })\n  }\n      \n\nuseEffect(() => {\n  const interval = setInterval(() => {\n    request()\n    }, 1000*60)  \n  return () => {\n    clearInterval(interval)\n  }\n}, [])     \n       \n\n     function navigateTo(serviceName) {\n       const state = {'name': props.projectName, 'id': props.formID.id}\n       history.push(`/${serviceName}`, state);\n  }\n    \n      return (\n        <div style={{height: '100%', width:'100%'}}>\n            {!error &&\n            <React.Fragment>\n               <h2 style={{color: '#194d33', fontSize: 20, textAlign: 'center'}}>Your project ID is: </h2>\n               <h2 style={{textTransform: 'lowercase', color: '#194d33', fontSize: 20, textAlign: 'center'}}>{props.formID.id} </h2>\n               <h2 style={{color: '#194d33', fontSize: 20, textAlign: 'center'}}>Your project name is {props.projectName} </h2>\n               <LoadingPage/>\n            </React.Fragment>\n            }\n            {success &&  navigateTo(\"results\")}\n          {error && <React.Fragment><h3 className='error' style={{fontSize: 20, textAlign: 'center'}}>Someting is wrong! </h3>\n          <h3 className='error' style={{fontSize: 20, textAlign: 'center'}}> Error message: {error_msg}</h3> \n          <p></p></React.Fragment>\n}  \n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}