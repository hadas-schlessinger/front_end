{"ast":null,"code":"var _jsxFileName = \"/Users/hadasch/PycharmProjects/front_end/src/components/SetData/ParametersForm.js\";\nimport React, { useState, Fragment } from 'react';\nimport * as SetParams from '../../services/SetParams';\nimport transperantBackground from '../../transperantBackground.png';\nimport Calculating from './Calculating';\nexport default function ParametersForm(props) {\n  const [comperament, setComperament] = useState(\"\");\n  const [luminex, setLuminex] = useState(false);\n  const [logCytokines, setLogCytokines] = useState(false);\n  const [k, setK] = useState(6);\n  const [outcomes, setOutcomes] = useState(\"\");\n  const [covariates, setCovariates] = useState(\"\");\n  const [logColumns, setLogColumns] = useState(\"\");\n  const [cytokines, setCytokines] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  const [formID, setId] = useState(props.id);\n  const [patients, setPatients] = useState(props.outcomes); // useEffect()\n\n  async function onSubmit(event) {\n    event.preventDefault();\n    SetParams.setParameters(props.id, props.projectName, comperament, luminex, logCytokines, k, outcomes, covariates, logColumns, cytokines).then(response => {\n      const id = response.data.id.id;\n      setId({\n        id\n      });\n      setError(false);\n      setSuccess(true);\n    }).catch(error => {\n      setError(true);\n      console.log(error);\n    });\n  }\n\n  return React.createElement(\"div\", {\n    style: {\n      backgroundImage: `url(${transperantBackground})`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, !success && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Settings\"), React.createElement(\"form\", {\n    action: \"/generate\",\n    method: \"post\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Input Parameters for Project \", props.projectName, \" \"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Method parameters\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Cytokines to Analyze\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"List of cytokines to be analyzed. If None, will analyze all cytokines in the cytokine_data file\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Cytokines\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"cytokines\",\n    placeholder: \"List of cytokines\",\n    onChange: event => setCytokines(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Luminex\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \" Mark this if your file is a luminex measurements file. Note - if you are using luminex directly, please make sure all value are specific. if a value is not mentioned as numeric, please change it to a chosen real number  \"), React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"luminex\",\n    onChange: event => setLuminex(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"luminex\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Max Number of Clusters (k)\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"The maximal number of clusters that can be chosen. The defualt value is 6 clusters\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Max K\"), React.createElement(\"input\", {\n    type: \"number\",\n    name: \"max_testing_k\",\n    placeholder: \"6\",\n    onChange: event => setK(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Log Transformation on Cytokines Data\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Marking this will generate log transformation on the cytokine data\"), React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"log_transform\",\n    onChange: event => setLogCytokines(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"log transformation\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Name of the compartment\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Insert the name of compartment from which cytokines were extracted, e.g., serum, nasel, etc\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Name Compartment\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name_compartment\",\n    placeholder: \"Plasma, Nasal Wash\",\n    onChange: event => setComperament(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), patients && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Sample Demographics and Clinical Outcomes Parameters (optional)\"), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Please insert the following parameters only if you uploaded sample demographics and clinical outcomes data\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Outcomes\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Optional. Names of outcome variables from the patients data data-frame to be analyzed. If list is left empty, will not perform the associations to outcomes analysis. To insert more then one column, please split the column names with \\\", \\\" (i.e - outcome1, outcome2, ..., outcomeN) Note - binary and continues variables should be analyzed separately (two runs, one for binary variables and one for continues variables)\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Outcomes\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"outcomes\",\n    placeholder: \"outcome variables\",\n    onChange: event => setOutcomes(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \" Covariates\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Optional. Names of covariate variables (columns) from the patients_data.xlsx data-frame to be controlled for in the regression models. If list is left empty (i.e., []), will not controll the associations to outcomes analysis with any covariate variables\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Covariates\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"covariates\",\n    placeholder: \"Age\",\n    onChange: event => setCovariates(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Patients data attributes to perform log function on\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"List with names of covariate columns to be log-transformed. If there are no columns you wish to transform, leave empty \"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Columns for log\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"log_column_names\",\n    placeholder: \"Age\",\n    onChange: event => setLogColumns(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }))), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    onClick: event => onSubmit(event),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Clicking the \\\"Submit\\\" button, will run the CytoMod analysis\")), error && React.createElement(\"medium\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Something went wrong - please go back to the upload tab and insert your data and project name\"), success && React.createElement(Calculating, {\n    projectName: props.projectName,\n    formID: formID,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/hadasch/PycharmProjects/front_end/src/components/SetData/ParametersForm.js"],"names":["React","useState","Fragment","SetParams","transperantBackground","Calculating","ParametersForm","props","comperament","setComperament","luminex","setLuminex","logCytokines","setLogCytokines","k","setK","outcomes","setOutcomes","covariates","setCovariates","logColumns","setLogColumns","cytokines","setCytokines","success","setSuccess","error","setError","formID","setId","id","patients","setPatients","onSubmit","event","preventDefault","setParameters","projectName","then","response","data","catch","console","log","backgroundImage","target","value"],"mappings":"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","sourcesContent":["import React, {useState, Fragment} from 'react'\nimport * as SetParams from  '../../services/SetParams'\nimport transperantBackground from '../../transperantBackground.png'\nimport Calculating from './Calculating';\n\n\nexport default function ParametersForm(props) {\n  const [comperament, setComperament] = useState(\"\")\n  const [luminex, setLuminex] = useState(false)\n  const [logCytokines, setLogCytokines] = useState(false)\n  const [k, setK] = useState(6)\n  const [outcomes, setOutcomes] = useState(\"\")\n  const [covariates, setCovariates] = useState(\"\")\n  const [logColumns, setLogColumns] = useState(\"\")\n  const [cytokines, setCytokines] = useState(\"\")\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState(false);\n  const [formID, setId] = useState(props.id)\n  const [patients, setPatients] = useState(props.outcomes)\n\n  // useEffect()\n\n  async function onSubmit(event) {\n    event.preventDefault();   \n    SetParams.setParameters(props.id, props.projectName, comperament, luminex, logCytokines, k, outcomes, covariates, logColumns, cytokines).then(\n        (response) => {\n        const id = response.data.id.id\n        setId({id})\n        setError(false)\n        setSuccess(true)\n        }).catch((error) => {\n        setError(true)\n        console.log(error)\n      })\n      \n  }\n  \n\nreturn (\n<div style={{backgroundImage: `url(${transperantBackground})`}}> \n{!success && <div>\n <h1>Settings</h1>\n <form action=\"/generate\" method=\"post\">\n<h2>Input Parameters for Project {props.projectName} </h2>\n<h2>Method parameters</h2>\n        <h3>Cytokines to Analyze</h3>\n            <p>List of cytokines to be analyzed. If None, will analyze all cytokines in the cytokine_data file</p>\n            <label>Cytokines</label>\n             <input type=\"text\" name=\"cytokines\" placeholder=\"List of cytokines\" onChange={event => setCytokines(event.target.value)}/ >\n        <h3>Luminex</h3>\n            <p> Mark this if your file is a luminex measurements file. Note - if you are using luminex directly, please make sure all value are specific.\n                if a value is not mentioned as numeric, please change it to a chosen real number  </p> \n            <input type=\"checkbox\" name=\"luminex\" onChange={event => setLuminex(event.target.value)}/>\n            <label>luminex</label>\n        <h3>Max Number of Clusters (k)</h3>\n            <p>The maximal number of clusters that can be chosen. The defualt value is 6 clusters</p>\n            <label>Max K</label>\n            <input type=\"number\" name=\"max_testing_k\" placeholder=\"6\" onChange={event => setK(event.target.value)}/>\n        <h3>Log Transformation on Cytokines Data</h3>\n            <p>Marking this will generate log transformation on the cytokine data</p>\n            <input type=\"checkbox\" name=\"log_transform\" onChange={event => setLogCytokines(event.target.value)}/>\n            <label>log transformation</label>     \n       \n        <h3>Name of the compartment</h3>\n            <p>Insert the name of compartment from which cytokines were extracted, e.g., serum, nasel, etc</p>\n            <label>Name Compartment</label>\n            <input type=\"text\" name=\"name_compartment\" placeholder=\"Plasma, Nasal Wash\" onChange={event => setComperament(event.target.value)}/>\n        {patients && \n        <Fragment>\n        <h2>Sample Demographics and Clinical Outcomes Parameters (optional)</h2>\n        <b>Please insert the following parameters only if you uploaded sample demographics and clinical outcomes data</b>\n        <h3>Outcomes</h3>\n            <p>Optional. Names of outcome variables from the patients data data-frame to be analyzed.\n            If list is left empty, will not perform the associations to outcomes analysis.\n            To insert more then one column, please split the column names with \", \" (i.e - outcome1, outcome2, ..., outcomeN)\n            Note - binary and continues variables should be analyzed separately (two runs, one for binary variables and one for continues variables)</p>\n            <label>Outcomes</label>\n            <input type=\"text\" name=\"outcomes\" placeholder=\"outcome variables\" onChange={event => setOutcomes(event.target.value)}/>\n        <h3> Covariates</h3>\n            <p>Optional. Names of covariate variables (columns) from the patients_data.xlsx data-frame\n            to be controlled for in the regression models. If list is left empty (i.e., []),\n            will not controll the associations to outcomes analysis with any covariate variables</p>\n            <label>Covariates</label>\n            <input type=\"text\" name=\"covariates\" placeholder=\"Age\" onChange={event => setCovariates(event.target.value)}/>\n        <h3>Patients data attributes to perform log function on</h3>\n            <p>List with names of covariate columns to be log-transformed.\n            If there are no columns you wish to transform, leave empty </p>\n            <label>Columns for log</label>\n            <input type=\"text\" name=\"log_column_names\" placeholder=\"Age\" onChange={event => setLogColumns(event.target.value)}/>\n            </Fragment>\n            }\n        \n    </form>\n    <p></p>\n        <input type=\"submit\" value=\"Submit\" onClick={(event) => onSubmit(event)}/>\n        <p>Clicking the \"Submit\" button, will run the CytoMod analysis</p>\n        </div>\n        }\n        {error && <medium className='error'>Something went wrong - please go back to the upload tab and insert your data and project name</medium>}\n        {success && <Calculating projectName = {props.projectName} formID={formID} / >   }  \n\n</div>\n\n    )\n}\n"]},"metadata":{},"sourceType":"module"}